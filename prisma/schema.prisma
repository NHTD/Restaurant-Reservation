// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id String @id @default(uuid())
  name String
  users RoleBinding[]
}

model User {
  id String @id @default(uuid())
  email String
  name String
  age Int
  address String
  roles RoleBinding[]
  reservations Reservation[]
}

model RoleBinding {
  userId String
  roleId String
  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])
  @@id([userId, roleId]) 
}

model Table {
  id String @id @default(uuid())
  restaurantId String
  name String
  capacity Int
  location String?
  status TableStatus @default(AVAILABLE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reservations Reservation[]
}

model Reservation {
  id String @id @default(uuid())
  userId String
  restaurantId String
  tableId String?
  numberOfPeople Int
  time DateTime
  status ReservationStatus @default(PENDING)
  note String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  table Table? @relation(fields: [tableId], references: [id])
}

model Restaurant {
  id String @id @default(uuid())
  name String
  address String
  city String
  district String
  phone String?    
  email String?     
  description String?   
  images String[]     
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TableStatus {
  AVAILABLE
  RESERVED
  OCCUPIED
  CLEANING
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
}
